diff --git a/src/SchedulerManager.php b/src/SchedulerManager.php
index 96537e7..636f89d 100644
--- a/src/SchedulerManager.php
+++ b/src/SchedulerManager.php
@@ -111,75 +111,89 @@ class SchedulerManager {
         continue;
       }
 
-      // Check that other modules allow the action on this node.
-      if (!$this->isAllowed($node, $action)) {
-        continue;
-      }
-
-      // Trigger the PRE_PUBLISH event so that modules can react before the node
-      // is published.
-      $event = new SchedulerEvent($node);
-      $dispatcher->dispatch(SchedulerEvents::PRE_PUBLISH, $event);
-      $node = $event->getNode();
-
-      // If an API call has removed the date $node->set('changed', $publish_on)
-      // would fail, so trap this exception here and give a meaningful message.
-      if (empty($node->publish_on->value)) {
-        $field_definitions = $this->entityManager->getFieldDefinitions('node', $node->getType());
-        $field = (string)$field_definitions['publish_on']->getLabel();
-        throw new SchedulerMissingDateException(sprintf("Node %d '%s' will not be published because field '%s' has no value", $node->id(), $node->getTitle(), $field));
-        continue;
-      }
-
-      // Update timestamps.
-      $publish_on = $node->publish_on->value;
-      $node->set('changed', $publish_on);
-      $old_creation_date = $node->getCreatedTime();
-      if ($node->type->entity->getThirdPartySetting('scheduler', 'publish_touch', $this->setting('default_publish_touch'))) {
-        $node->setCreatedTime($publish_on);
-      }
-
-      $create_publishing_revision = $node->type->entity->getThirdPartySetting('scheduler', 'publish_revision', $this->setting('default_publish_revision'));
-      if ($create_publishing_revision) {
-        $node->setNewRevision();
-        // Use a core date format to guarantee a time is included.
-        $node->revision_log = t('Node published by Scheduler on @now. Previous creation date was @date.', array(
-          '@now' => $this->dateFormatter->format(REQUEST_TIME, 'short'),
-          '@date' => $this->dateFormatter->format($old_creation_date, 'short'),
-        ));
+      $translations = $node->getTranslationLanguages();
+      foreach ($translations as $translation) {
+        $node = $node->getTranslation($translation->getId());
+
+        // Check that other modules allow the action on this node.
+        if (!$this->isAllowed($node, $action)) {
+          continue;
+        }
+
+        // Trigger the PRE_PUBLISH event so that modules can react before the node
+        // is published.
+        $event = new SchedulerEvent($node);
+        $dispatcher->dispatch(SchedulerEvents::PRE_PUBLISH, $event);
+        $node = $event->getNode();
+
+        // If publish_on is empty but other translations are available, go on.
+        if (empty($node->publish_on->value) && count($translations) > 1) {
+          continue;
+        }
+        // If an API call has removed the date $node->set('changed', $publish_on)
+        // would fail, so trap this exception here and give a meaningful message.
+        elseif (empty($node->publish_on->value)) {
+          $field_definitions = $this->entityManager->getFieldDefinitions('node', $node->getType());
+          $field = (string) $field_definitions['publish_on']->getLabel();
+          throw new SchedulerMissingDateException(sprintf("Node %d '%s' will not be published because field '%s' has no value", $node->id(), $node->getTitle(), $field));
+          continue;
+        }
+
+        //Check if publish_on is greater than REQUEST_TIME
+        if ($node->publish_on->value > REQUEST_TIME) {
+          continue;
+        }
+
+        // Update timestamps.
+        $publish_on = $node->publish_on->value;
+        $node->set('changed', $publish_on);
+        $old_creation_date = $node->getCreatedTime();
+        if ($node->type->entity->getThirdPartySetting('scheduler', 'publish_touch', $this->setting('default_publish_touch'))) {
+          $node->setCreatedTime($publish_on);
+        }
+
+        $create_publishing_revision = $node->type->entity->getThirdPartySetting('scheduler', 'publish_revision', $this->setting('default_publish_revision'));
+        if ($create_publishing_revision) {
+          $node->setNewRevision();
+          // Use a core date format to guarantee a time is included.
+          $node->revision_log = t('Node published by Scheduler on @now. Previous creation date was @date.', array(
+            '@now' => $this->dateFormatter->format(REQUEST_TIME, 'short'),
+            '@date' => $this->dateFormatter->format($old_creation_date, 'short'),
+          ));
+        }
+        // Unset publish_on so the node will not get rescheduled by subsequent
+        // calls to $node->save().
+        $node->publish_on->value = NULL;
+
+        // Log the fact that a scheduled publication is about to take place.
+        $view_link = $node->link(t('View node'));
+        $nodetype_url = Url::fromRoute('entity.node_type.edit_form', array('node_type' => $node->getType()));
+        $nodetype_link = \Drupal::l(node_get_type_label($node) . ' ' . t('settings'), $nodetype_url);
+        $logger_variables = array(
+          '@type' => node_get_type_label($node),
+          '%title' => $node->getTitle(),
+          'link' => $nodetype_link . ' ' . $view_link,
+        );
+        $this->logger->notice('@type: scheduled publishing of %title.', $logger_variables);
+
+        // Use the actions system to publish the node.
+        $this->entityManager->getStorage('action')->load('node_publish_action')->getPlugin()->execute($node);
+
+        // Invoke the event to tell Rules that Scheduler has published this node.
+        if ($this->moduleHandler->moduleExists('rules')) {
+           $event_dispatcher = \Drupal::service('event_dispatcher');
+           $event = new SchedulerHasPublishedThisNodeEvent($node); // @todo 2nd param $publish_on may be needed as the date will no longer be on the node
+           $event_dispatcher->dispatch(SchedulerHasPublishedThisNodeEvent::EVENT_NAME, $event);
+        }
+
+        // Trigger the PUBLISH event so that modules can react after the node is
+        // published.
+        $event = new SchedulerEvent($node);
+        $dispatcher->dispatch(SchedulerEvents::PUBLISH, $event);
+        $event->getNode()->save();
+
+        $result = TRUE;
       }
-      // Unset publish_on so the node will not get rescheduled by subsequent
-      // calls to $node->save().
-      $node->publish_on->value = NULL;
-
-      // Log the fact that a scheduled publication is about to take place.
-      $view_link = $node->link(t('View node'));
-      $nodetype_url = Url::fromRoute('entity.node_type.edit_form', array('node_type' => $node->getType()));
-      $nodetype_link = \Drupal::l(node_get_type_label($node) . ' ' . t('settings'), $nodetype_url);
-      $logger_variables = array(
-        '@type' => node_get_type_label($node),
-        '%title' => $node->getTitle(),
-        'link' => $nodetype_link . ' ' . $view_link,
-      );
-      $this->logger->notice('@type: scheduled publishing of %title.', $logger_variables);
-
-      // Use the actions system to publish the node.
-      $this->entityManager->getStorage('action')->load('node_publish_action')->getPlugin()->execute($node);
-
-      // Invoke the event to tell Rules that Scheduler has published this node.
-      if ($this->moduleHandler->moduleExists('rules')) {
-         $event_dispatcher = \Drupal::service('event_dispatcher');
-         $event = new SchedulerHasPublishedThisNodeEvent($node); // @todo 2nd param $publish_on may be needed as the date will no longer be on the node
-         $event_dispatcher->dispatch(SchedulerHasPublishedThisNodeEvent::EVENT_NAME, $event);
-      }
-
-      // Trigger the PUBLISH event so that modules can react after the node is
-      // published.
-      $event = new SchedulerEvent($node);
-      $dispatcher->dispatch(SchedulerEvents::PUBLISH, $event);
-      $event->getNode()->save();
-
-      $result = TRUE;
     }
 
     return $result;
@@ -230,81 +244,90 @@ class SchedulerManager {
         continue;
       }
 
-      // Check that other modules allow the action on this node.
-      if (!$this->isAllowed($node, $action)) {
-        continue;
-      }
-
-      // Do not process the node if it still has a publish_on time which is in
-      // the past, as this implies that scheduled publishing has been blocked by
-      // one of the hook functions we provide, and is still being blocked now
-      // that the unpublishing time has been reached.
-      $publish_on = $node->publish_on->value;
-      if (!empty($publish_on) && $publish_on <= REQUEST_TIME) {
-        continue;
-      }
-
-      // Trigger the PRE_UNPUBLISH event so that modules can react before the
-      // node is unpublished.
-      $event = new SchedulerEvent($node);
-      $dispatcher->dispatch(SchedulerEvents::PRE_UNPUBLISH, $event);
-      $node = $event->getNode();
-
-      // If an API call has removed the date $node->set('changed', $unpublish_on)
-      // would fail, so trap this exception here and give a meaningful message.
-      if (empty($node->unpublish_on->value)) {
-        $field_definitions = $this->entityManager->getFieldDefinitions('node', $node->getType());
-        $field = (string)$field_definitions['unpublish_on']->getLabel();
-        throw new SchedulerMissingDateException(sprintf("Node %d '%s' will not be unpublished because field '%s' has no value", $node->id(), $node->getTitle(), $field));
-        continue;
-      }
-
-      // Update timestamps.
-      $old_change_date = $node->getChangedTime();
-      $unpublish_on = $node->unpublish_on->value;
-      $node->set('changed', $unpublish_on);
-
-      $create_unpublishing_revision = $node->type->entity->getThirdPartySetting('scheduler', 'unpublish_revision', $this->setting('default_unpublish_revision'));
-      if ($create_unpublishing_revision) {
-        $node->setNewRevision();
-        // Use a core date format to guarantee a time is included.
-        $node->revision_log = t('Node unpublished by Scheduler on @now. Previous change date was @date.', array(
-          '@now' => $this->dateFormatter->format(REQUEST_TIME, 'short'),
-          '@date' => $this->dateFormatter->format($old_change_date, 'short'),
-        ));
-      }
-      // Unset unpublish_on so the node will not get rescheduled by subsequent
-      // calls to $node->save(). Save the value for use when calling Rules.
-      $node->unpublish_on->value = NULL;
-
-      // Log the fact that a scheduled unpublication is about to take place.
-      $view_link = $node->link(t('View node'));
-      $nodetype_url = Url::fromRoute('entity.node_type.edit_form', array('node_type' => $node->getType()));
-      $nodetype_link = \Drupal::l(node_get_type_label($node) . ' ' . t('settings'), $nodetype_url);
-      $logger_variables = array(
+      $translations = $node->getTranslationLanguages();
+      foreach ($translations as $translation) {
+        $node = $node->getTranslation($translation->getId());
+
+        // Check that other modules allow the action on this node.
+        if (!$this->isAllowed($node, $action)) {
+          continue;
+        }
+
+        // Do not process the node if it still has a publish_on time which is in
+        // the past, as this implies that scheduled publishing has been blocked by
+        // one of the hook functions we provide, and is still being blocked now
+        // that the unpublishing time has been reached.
+        $publish_on = $node->publish_on->value;
+        if (!empty($publish_on) && $publish_on <= REQUEST_TIME) {
+          continue;
+        }
+
+        // Trigger the PRE_UNPUBLISH event so that modules can react before the
+        // node is unpublished.
+        $event = new SchedulerEvent($node);
+        $dispatcher->dispatch(SchedulerEvents::PRE_UNPUBLISH, $event);
+        $node = $event->getNode();
+
+        // If unpublish_on is empty but other translations are available, go on.
+        if (empty($node->unpublish_on->value) && count($translations) > 1) {
+          continue;
+        }
+        // If an API call has removed the date $node->set('changed', $unpublish_on)
+        // would fail, so trap this exception here and give a meaningful message.
+        elseif (empty($node->unpublish_on->value)) {
+          $field_definitions = $this->entityManager->getFieldDefinitions('node', $node->getType());
+          $field = (string)$field_definitions['unpublish_on']->getLabel();
+          throw new SchedulerMissingDateException(sprintf("Node %d '%s' will not be unpublished because field '%s' has no value", $node->id(), $node->getTitle(), $field));
+          continue;
+        }
+
+        // Update timestamps.
+        $old_change_date = $node->getChangedTime();
+        $unpublish_on = $node->unpublish_on->value;
+        $node->set('changed', $unpublish_on);
+
+        $create_unpublishing_revision = $node->type->entity->getThirdPartySetting('scheduler', 'unpublish_revision', $this->setting('default_unpublish_revision'));
+        if ($create_unpublishing_revision) {
+          $node->setNewRevision();
+          // Use a core date format to guarantee a time is included.
+          $node->revision_log = t('Node unpublished by Scheduler on @now. Previous change date was @date.', array(
+            '@now' => $this->dateFormatter->format(REQUEST_TIME, 'short'),
+            '@date' => $this->dateFormatter->format($old_change_date, 'short'),
+          ));
+        }
+        // Unset unpublish_on so the node will not get rescheduled by subsequent
+        // calls to $node->save(). Save the value for use when calling Rules.
+        $node->unpublish_on->value = NULL;
+
+        // Log the fact that a scheduled unpublication is about to take place.
+        $view_link = $node->link(t('View node'));
+        $nodetype_url = Url::fromRoute('entity.node_type.edit_form', array('node_type' => $node->getType()));
+        $nodetype_link = \Drupal::l(node_get_type_label($node) . ' ' . t('settings'), $nodetype_url);
+        $logger_variables = array(
         '@type' => node_get_type_label($node),
         '%title' => $node->getTitle(),
         'link' => $nodetype_link . ' ' . $view_link,
-      );
-      $this->logger->notice('@type: scheduled unpublishing of %title.', $logger_variables);
-
-      // Use the actions system to publish the node.
-      $this->entityManager->getStorage('action')->load('node_unpublish_action')->getPlugin()->execute($node);
-
-      // Invoke event to tell Rules that Scheduler has unpublished this node.
-      if ($this->moduleHandler->moduleExists('rules')) {
-        $event_dispatcher = \Drupal::service('event_dispatcher');
-        $event = new SchedulerHasUnpublishedThisNodeEvent($node); // @todo 2nd param $unpublish_on may be needed as the date will no longer be on the node
-        $event_dispatcher->dispatch(SchedulerHasUnpublishedThisNodeEvent::EVENT_NAME, $event);
+        );
+        $this->logger->notice('@type: scheduled unpublishing of %title.', $logger_variables);
+
+        // Use the actions system to publish the node.
+        $this->entityManager->getStorage('action')->load('node_unpublish_action')->getPlugin()->execute($node);
+
+        // Invoke event to tell Rules that Scheduler has unpublished this node.
+        if ($this->moduleHandler->moduleExists('rules')) {
+          $event_dispatcher = \Drupal::service('event_dispatcher');
+          $event = new SchedulerHasUnpublishedThisNodeEvent($node); // @todo 2nd param $unpublish_on may be needed as the date will no longer be on the node
+          $event_dispatcher->dispatch(SchedulerHasUnpublishedThisNodeEvent::EVENT_NAME, $event);
+        }
+
+        // Trigger the UNPUBLISH event so that modules can react before the node
+        // is unpublished.
+        $event = new SchedulerEvent($node);
+        $dispatcher->dispatch(SchedulerEvents::UNPUBLISH, $event);
+        $event->getNode()->save();
+
+        $result = TRUE;
       }
-
-      // Trigger the UNPUBLISH event so that modules can react before the node
-      // is unpublished.
-      $event = new SchedulerEvent($node);
-      $dispatcher->dispatch(SchedulerEvents::UNPUBLISH, $event);
-      $event->getNode()->save();
-
-      $result = TRUE;
     }
 
     return $result;
